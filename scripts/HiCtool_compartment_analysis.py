# Program to perform compartment analysis:
# - Calculate PC1 or PC2 of the Pearson correlation matrix of the O/E matrix.
# - Plot PC1 (eigenvector of the Pearson correlation matrix) of the  or PC2 values.
#
# To use this code, the Pearson correlation matrix must be provided (see HiCtool_yaffe_tanay.py).

# Usage: python2.7 HiCtool_compartment_analysis.py [-h] [options]
# Options:
#  -h, --help                show this help message and exit
#  --action                  Action to perform: calculate_pc or plot_pc.
#  -i INPUT_FILE             Input file with PC values to be plotted (only used for plotting, no need of -i for calculate_pc action).
#  -c CHROMSIZES_PATH        Path to the folder chromSizes with trailing slash at the end.
#  -b BIN_SIZE               Bin size (resolution) of the contact matrix.
#  -s SPECIES                Species. It has to be one of those present under the chromSizes path.
#  --processors              Processors to be used to calculate the PC for multiple chromosomes in parallel.
#  --chr                     Single chromosome for PC calculation or plotting, or list of chromosomes between square brackets for PC calculation of multiple chromosomes at once.
#  --full_chromosome         Insert 1 to plot PC values for the entire chromosome, 0 otherwise.
#  --pc                      Which principal component to be used for compartment analysis: PC1 or PC2.
#  --flip                    Set to -1 if you wish to flip PC values anyways, otherwise leave this parameter as None.
#  --coord                   List of two integers with start and end coordinates to plot PC values only for a specific region.
#  --plot_grid               If action is "plot_pc", insert 1 to plot the grid, 0 otherwise.
#  --plot_axis               If action is "plot_pc", insert 1 to plot the axis, 0 otherwise.

from optparse import OptionParser
import numpy as np
import os
from time import gmtime, strftime
from multiprocessing import Pool

parameters = {'action': None,
              'input_file': None,
              'chromSizes_path': None,
              'chr': None,
              'species': None,
              'processors': None,
              'bin_size': None,
              'full_chromosome': None,
              'coord': None,
              'pc': None,
              'flip': None,
              'plot_grid': None,
              'plot_axis': None
              }


def load_matrix(input_file):
    """
    Load an HiCtool compressed square (and symmetric) contact matrix from a txt file and parse it.
    Arguments:
        input_file (str): input file name in txt format (generated by the function 
        "save_matrix").
    Return: 
        numpy array containing the parsed values stored in the input txt file to build a contact matrix.      
    """
    import numpy as np    
    
    print "Loading " + input_file + "..."
    with open (input_file,'r') as infile:
        matrix_vect = []        
        for i in infile:
            if i[0] == "0" and i[1] != ".":
                for k in xrange(int(i[1:-1])):
                    matrix_vect.append(0)
            else:
                j = i[:-1]            
                matrix_vect.append(float(j))
  
    k = len(matrix_vect)
    matrix_size = int((-1+np.sqrt(1+8*k))/2)
    
    iu = np.triu_indices(matrix_size)
    output_matrix_1 = np.zeros((matrix_size,matrix_size)) # upper triangular plus the diagonal
    output_matrix_1[iu] = matrix_vect
    
    diag_matrix = np.diag(np.diag(output_matrix_1)) # diagonal
    output_matrix_2 = np.transpose(output_matrix_1) # lower triangular plus the diagonal
    output_matrix = output_matrix_1 + output_matrix_2 - diag_matrix
    print "Done!"
    return output_matrix


def calculate_pc(a_chr):
    """
    Calculate principal components and save to file the PC (PC1 or PC2) chosen with the input parameters.
    Arguments:
        a_chr (str): chromosome number (example for chromosome 1: '1').
    Return:
        None.
    Outputs:
        Txt file with the PC values.
    """
    import pandas as pd
    from sklearn.decomposition import PCA
    
    bin_size = parameters["bin_size"]
    pc = parameters['pc']
    flip = parameters['flip']
    
    input_correlation_matrix = load_matrix("yaffe_tanay_" + str(bin_size) + "/chr" + a_chr + "_" + str(bin_size) + "_correlation_matrix.txt")
    output_filename = "yaffe_tanay_" + str(bin_size) + "/chr" + a_chr + '_' + str(bin_size) + '_'  + pc + '.txt'  
    
    print "Performing PCA..."
    pca = PCA(n_components=2)
    principalComponents = pca.fit_transform(input_correlation_matrix)
    principalDf = pd.DataFrame(data = principalComponents, columns = ['PC1', 'PC2'])
    compartments = principalDf[pc]
    # Checking if active zones correspond to positive PC
    if flip == -1:
        compartments = compartments * -1
    
    # Save pc values to output file
    with open (output_filename,'w') as fout:
        n = len(compartments)
        for i in xrange(n):
            fout.write('%s\n' %compartments[i])
    print "Done!"


def plot_pc(input_pc_file, 
            a_chr,
            bin_size,
            full_chromosome=True,
            start_pos=0, 
            end_pos=0,
            pc="PC1",
            plot_grid=False,
            plot_axis=False):
    """
    Function to plot the PC values for a chromosome.
    Arguments:
        input_pc_file (str): txt file of the PC values generated with the action "calculate_pc".
        a_chr (str): chromosome number (example for chromosome 1: '1').
        bin_size (int): bin size used in the analysis.
        full_chromosome (bool): if True, plot the full chromosome "a_chr". In this case "start_pos" and "end_pos" parameters are not considered.
        start_pos (int): start coordinate for the plot in bp.
        end_pos (int): end coordinate for the plot in bp.
        pc (str): which PC has been used in the analysis (PC1 or PC2).
        plot_grid (bool): if True, plot the grid.
        plot_axis (bool): if True, plot the axis.
    Output:
        Plot saved to pdf file.
    """    
    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib
    matplotlib.use('Agg')

    chromosomes = open(parameters['chromSizes_path'] + parameters['species'] + '.chrom.sizes', 'r')
    chromosomes_list = []
    chr_dim = []
    d_chr_length = {}
    d_chr_dim = {}
    while True:
        try:
            line2list = next(chromosomes).split('\n')[0].split('\t')
            chromosomes_list.append(line2list[0])
            chr_dim.append(int(line2list[1])/bin_size)
            d_chr_length[line2list[0]] = int(line2list[1])
            d_chr_dim[line2list[0]] = int(line2list[1])/bin_size
        except StopIteration:
            break

    output_filename = "yaffe_tanay_" + str(bin_size) + '/chr' + a_chr + '_' + str(bin_size) + '_' + pc + '.pdf'

    if full_chromosome == True:
        start_pos = 0
        end_pos = int(round(d_chr_dim[a_chr]))*bin_size
        start_index = 0
        end_index = int(round(d_chr_dim[a_chr])) + 1
    else:
        if end_pos == 0:
            print "ERROR: insert start and end coordinates"
            return
        start_index = int(round(start_pos/bin_size))
        end_index = int(round((end_pos)/bin_size))
    
        if end_pos > int(round(d_chr_dim[a_chr]))*bin_size and end_pos <= d_chr_length[a_chr]:
            end_pos = int(round(d_chr_dim[a_chr]))*bin_size
        elif end_pos > d_chr_length[a_chr]:
            print("ERROR: end coordinate exceeds chromosome dimension")
            return
        
    fp = open(input_pc_file,'r+')
    lines = fp.read().split('\n')
    lines = lines[:-1]
    input_pc = (np.array(map(float, lines))).tolist()
    input_pc_part = input_pc[start_index:end_index]

    x = np.arange(start_pos,end_pos,bin_size)
    width = bin_size/1.5
    pos_comp = np.array(input_pc_part)
    neg_comp = np.array(input_pc_part)
    pos_comp[pos_comp <= 0] = np.nan
    neg_comp[neg_comp > 0] = np.nan
    
    print "Plotting " + pc + " values..."
    plt.close("all")
    plt.bar(x, pos_comp, width, color="r", label="Positive " + pc, linewidth = 0)
    plt.bar(x, neg_comp, width, color="b", label="Negative " + pc, linewidth = 0)
    plt.xlim([x[0]-bin_size*8,x[-1]+bin_size*8])
    plt.ylim([min(input_pc_part)-2,max(input_pc_part)+2])
    plt.title(pc + " [Chr " + a_chr +": " + str(start_pos) + "-" + str(end_pos) + "]")
    plt.xlabel("Base coordinates")
    plt.grid(plot_grid)
    if plot_axis == 0:
        plt.axis('off')
    plt.savefig(output_filename, format = 'pdf')
    print "Done!"


if __name__ == '__main__':
    
    usage = 'Usage: python2.7 HiCtool_compartment_analysis.py [-h] [options]'
    parser = OptionParser(usage = 'python2.7 %prog -i input_file [options]')
    parser.add_option('--action', dest='action', type='string', help='Action to perform: calculate_pc or plot_pc.')
    parser.add_option('-i', dest='input_file', type='string', help='Input file with PC values to be plotted (only used for plotting, no need of -i for calculate_pc action).')
    parser.add_option('-c', dest='chromSizes_path', type='string', help='Path to the folder chromSizes with trailing slash at the end.')
    parser.add_option('-b', dest='bin_size', type='int', help='Bin size (resolution) for the analysis.')
    parser.add_option('-s', dest='species', type='string', help='Species. It has to be one of those present under the chromSizes path.')
    parser.add_option('-p', dest='processors', type='int', default=1, help='Processors to be used to calculate the PC for multiple chromosomes in parallel.')
    parser.add_option('--chr', dest='chr', type='str', help='Single chromosome for PC calculation or plotting, or list of chromosomes between square brackets for PC calculation of multiple chromosomes at once.')  
    parser.add_option('--full_chromosome', dest='full_chromosome', type='int', default=1, help='Insert 1 to plot PC values for the entire chromosome, 0 otherwise.')      
    parser.add_option('--pc', dest='pc', type='str', help='Which principal component to be used for compartment analysis: PC1 or PC2.')  
    parser.add_option('--flip', dest='flip', type='int', help='Set to -1 if you wish to flip PC values anyways, otherwise leave this parameter as None.')  
    parser.add_option('--coord', dest='coord', type='str', help='List of two integers with start and end coordinates to plot PC values only for a specific region.')  
    parser.add_option('--plot_grid', dest='plot_grid', type='int', default=0, help='If action is "plot_pc", insert 1 to plot the grid, 0 otherwise.')  
    parser.add_option('--plot_axis', dest='plot_axis', type='int', default=0, help='If action is "plot_pc", insert 1 to plot the axis, 0 otherwise.')  
    (options, args) = parser.parse_args( )
    
    if options.action == None:
        parser.error('-h for help or provide the action command (calculate_pc, plot_pc)!')
    else:
        pass
    if options.action == "plot_pc" and options.input_file == None:
        parser.error('-h for help or provide the input correlation matrix!')
    else:
        pass
    if options.bin_size == None:
        parser.error('-h for help or provide the bin size of the contact matrix!')
    else:
        pass
    if options.chromSizes_path == None:
        parser.error('-h for help or provide the chromSizes path!')
    else:
        pass
    if options.chr == None:
        parser.error('-h for help or provide the input chromosome (or eventually chromosomes if you are normalizing)!')
    else:
        pass
    if options.species == None:
        parser.error('-h for help or provide the species!')
    else:
        pass

    parameters['action'] = options.action
    parameters['input_file'] = options.input_file
    parameters['chromSizes_path'] = options.chromSizes_path
    parameters['chr'] = options.chr
    parameters['species'] = options.species
    parameters['processors'] = options.processors
    parameters['bin_size'] = options.bin_size
    parameters['full_chromosome'] = options.full_chromosome
    parameters['coord'] = options.coord
    parameters['pc'] = options.pc
    parameters['flip'] = options.flip
    parameters['plot_grid'] = options.plot_grid
    parameters['plot_axis'] = options.plot_axis

    if parameters['species'] + ".chrom.sizes" not in os.listdir(parameters['chromSizes_path']):
        available_species = ', '.join([x.split('.')[0] for x in  os.listdir(parameters['chromSizes_path'])])
        parser.error('Wrong species inserted! Check the species spelling or insert an available species: ' + available_species + '. If your species is not listed, please contact Riccardo Calandrelli at <rcalandrelli@eng.ucsd.edu>.')
    
    chromosomes = open(parameters['chromSizes_path'] + parameters['species'] + '.chrom.sizes', 'r')
    chromosomes_list = []
    chr_dim = []
    d_chr_dim = {}
    while True:
        try:
            line2list = next(chromosomes).split('\n')[0].split('\t')
            chromosomes_list.append(line2list[0])
            chr_dim.append(int(line2list[1])/parameters['bin_size'])
            d_chr_dim[line2list[0]] = int(line2list[1])/parameters['bin_size']
        except StopIteration:
            break
    
    if parameters['action'] == 'calculate_pc':
        
        chr_list = map(str, parameters['chr'].strip('[]').split(','))
        
        if len(chr_list) > 1:
            if parameters['processors'] != None and parameters['processors'] > 1:
                print "Calculate compartments in parallel for chromosomes " + parameters['chr'] + " using " + str(parameters['processors']) + " threads..."
                print "Start: " + strftime("%Y-%m-%d %H:%M:%S", gmtime())
                pool = Pool(processes=parameters['processors'])             
                pool.map(calculate_pc, chr_list)
                print "End: " + strftime("%Y-%m-%d %H:%M:%S", gmtime())
            else:
                print "Normalizing fend data for chromosomes " + parameters['chr'] + " using a single core..."
                print "Start: " + strftime("%Y-%m-%d %H:%M:%S", gmtime())
                for c in chr_list:
                    calculate_pc(c)
                print "End: " + strftime("%Y-%m-%d %H:%M:%S", gmtime())
        else:
            calculate_pc(chr_list[0])

    elif parameters['action']  == "plot_pc":
        
        chr_list = map(str, parameters['chr'].strip('[]').split(','))
        if len(chr_list) > 1:
            parser.error("Insert a single chromosome to be plotted.")
            
        if bool(parameters["full_chromosome"]) == False:
            coord = map(int, parameters['coord'].strip('[]').split(','))
            start_pos = coord[0]
            end_pos = coord[1]
        else:
            start_pos = 0
            end_pos = 0
        
        plot_pc(parameters['input_file'],
                chr_list[0],
                parameters['bin_size'],
                bool(parameters['full_chromosome']),
                start_pos,
                end_pos,
                parameters['pc'],
                bool(parameters["plot_grid"]),
                bool(parameters["plot_axis"]))
